(function (w, sym) {
    var inModule = !this
    // document.readyState === 'loading' && !inModule && document.write('<pre aria-hidden="true" style="transform:scale(0);position:absolute">.</pre>')
    // ('<!--[if IE]><link rel="stylesheet" href="' + location.origin + '/ie.css><![endif]-->')
    ''.startsWith || Object.defineProperty(String.prototype, 'startsWith', { value: function (str, pos) { pos = pos | 0; return this.slice(pos, (str += '').length + pos) === str } });[].find || Object.defineProperty(Array.prototype, 'find', { value: function (callback, thisArg) { for (var i = 0, l = this.length; i < l; ++i) { var me = this[i]; if (callback.call(thisArg, me)) return me } } })
    return main(w, sym)
    function main() {
        'use strict'
        var b = document.querySelector('script[src$="css_bad.js"]')
            , disambiguity = '/*stylesheet auto-generated by css.js*/'
        b = b && b.remove()
        if (sym in w || typeof w[disambiguity] === 'object') return w[sym]
        var get = document.getElementById.bind(document, disambiguity)
        w.reportError = w.reportError || function reportError(throwable) {
            try {
                var evt = new ErrorEvent('error', {
                    message: throwable.message,
                    error: throwable,
                    filename: scr && scr.src
                })
                w.dispatchEvent(evt)
                evt.defaultPrevented || console.error(throwable.toString())
            }
            catch(e) {}
        }
        function setName(n) {
             top.name = n
        }
        function getName() {
            try {
                var o = top.name
                if (!o.trim() || o.includes(disambiguity)) return o // name is free to use
                throw''
            }
            catch (e) {
                e && reportError(e)
                setName = sessionStorage.setItem.bind(sessionStorage, disambiguity)
                getName = sessionStorage.getItem.bind(sessionStorage, disambiguity)
                return getName() || ''
            }
        }
        var CSS = w.CSS = w.CSS || function () {
            var s = document.createElement('style')
                , computed = getComputedStyle(s)
            getWhateverNode().appendChild(s)
            return {
                supports:supports
            }
            function supports(propOrSelector, value) {
                var isSelector = propOrSelector.slice(0, 8) === 'selector'
                if (isSelector && value == null) {
                    s.textContent = propOrSelector.slice(9, -1) + '{width:auto;}'
                    return (s.sheet.cssRules || s.sheet.rules).length === 1
                }
                return propOrSelector in computed
            }
        }(),
            createElement = document.createElement.bind(document),
            name = getName(),
            fromEntries = Object.fromEntries || function (entries) {
                var out = {}
                entries.forEach(function (prop, val) {
                    out[prop] = val
                })
                return out
            },
            entries = Object.entries || function (obj) {
                var out = []
                for (var i in obj) out.push([i, obj[i]])
                return out
            },
            isArray = Array.isArray,
            scr = inModule ? document.querySelector('script[src$="css.js"]') : document.currentScript,
            sheet = getDefaultStyleSheet(),
            descr = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent'),
            setTextContent = descr.set.bind(sheet),
            getTextContent = descr.get.bind(sheet),
            dflt = new Set,
            has = dflt.has.bind(dflt),
            add = dflt.add.bind(dflt),
            alreadyLogged = new Set,
            alreadyHas = alreadyLogged.has.bind(alreadyLogged),
            addAlr = alreadyLogged.add.bind(alreadyLogged),
            allVendors = /^(?:-(?:webkit|moz(?:-osx)?|apple|khtml|konq|r?o|ms|xv|atsc|wap|ah|hp|rim|tc|fso|icab|epub)|prince|mso)-/,
            dontRedo = new Map,
            dontRedo_get = dontRedo.get.bind(dontRedo),
            dontRedo_has = dontRedo.has.bind(dontRedo),
            dontRedo_set = dontRedo.set.bind(dontRedo),
            sup = CSS.supports,
            dash = /-./g,
            azregex = /[A-Z]/g,
            pseudoElementRegex = / /.test.bind(/::[\w-]/),
            pseudoClassRegex = / /.test.bind(/:[\w-]/),
            cleanRegex = /(\s|\n)\1/g,
            reducedMotion = matchMedia('(prefers-reduced-motion:reduce)'),
            pev = pelem,
            theNames = allVendors.source.match(/\w+/g).reverse().slice(2),
            pcv = pclass
        CSS.registerProperty || function () {
            var m = new MutationObserver(callback)
            m.observe(document.documentElement, {
                subtree: true,
                childList: true,
                characterData: true
            })
            var regex = /--[\w-]+(?=:\s*)(?!\s*var\s*\()/g
            for(var i = document.styleSheets.length; i--;) 
                fixSheetRules(document.styleSheets[i].sheet)
            function fixString(node) {
                var txt = node.textContent,
                    newText = txt.replace(regex, getReplacements)
                if(txt !== newText) node.textContent = newText
            }
            function getReplacements(prop) {
                prop = prop.slice(2)
                if (prop === 'system-font') return
                return fallback.get(vendor(prop,'inherit')) || prop
            }
            function fixSheetRules(sheet) {
                var rules = sheet.cssRules || sheet.rules
                for(var i = rules.length; i--;) {
                    var me = rules[i]
                    var txt = me.cssText,
                    newText = txt.replace(regex, getReplacements)
                    if (newText !== txt) {
                        me.cssText = newText
                    }
                }
            }
            function load() {
                fixSheetRules(this.sheet)
            }
            function callback(records) {
                for (var i = records.length; i--;) {
                    var added = records[i].addedNodes
                    for (var j = added.length; j--;) {
                        var node = added[j]
                        if (node.getAttribute && node.getAttribute('rel') === 'stylesheet') {
                            node.addEventListener('load', load, { once: true })
                            continue
                        }
                        var el = (node.parentElement || node)
                        el.tagName === 'STYLE' && fixString(el)
                    }
                }
            }
            // function updateEachStyleSheet() {

            // }
        }()
        function dashVendor(prop, val) {
            return vendor(toDash(prop), val)
        }
        function capVendor(prop, val) {
            return toCaps(vendor(toDash(prop), val))
        }
        function badCSS(data, silent) {
            if (silent || alreadyHas(data)) return
            console.warn(data)
            addAlr(data)
        }
        function vendor(prop, val, silent) {
            if (prop.startsWith('--'))
                return prop
            if (val.trim() && !sup(prop, val)) {
                var prefix = prop = prop
                    .replace(allVendors, '')
                return dontRedo_has(prop) ? dontRedo_get(prop) : (
                    sup(prefix, val) ||
                    // Maybe you dont need a prefix?
                    sup(prefix = '-webkit-' + prop, val) ||
                    // Most likely (Chrome, Safari)
                    sup(prefix = '-moz-' + prop, val) ||
                    // Firefox
                    sup(prefix = '-moz-osx-' + prop, val) ||
                    // Firefox
                    sup(prefix = '-apple-' + prop, val) ||
                    // Apple
                    sup(prefix = '-o-' + prop, val) ||
                    // Opera
                    sup(prefix = '-ms-' + prop, val) ||
                    // Microsoft
                    sup(prefix = '-khtml-' + prop, val) ||
                    // Konqueror
                    sup(prefix = '-konq-' + prop, val) ||
                    // Konqueror
                    sup(prefix = 'mso-' + prop, val) ||
                    // Microsoft Office
                    sup(prefix = '-xv-' + prop, val) ||
                    // Opera
                    sup(prefix = '-atsc-' + prop, val) ||
                    // Advanced Television Standards Committee
                    sup(prefix = '-wap-' + prop, val) ||
                    // The WAP Forum
                    sup(prefix = 'prince-' + prop, val) ||
                    // YesLogic
                    sup(prefix = '-ah-' + prop, val) ||
                    // Antenna House
                    sup(prefix = '-hp-' + prop, val) ||
                    // Hewlett Packard
                    sup(prefix = '-ro-' + prop, val) ||
                    // Real Objects
                    sup(prefix = '-rim-' + prop, val) ||
                    // Research In Motion
                    sup(prefix = '-tc-' + prop, val) ||
                    // Tall Components
                    sup(prefix = '-fso-' + prop, val) ||
                    // IDK
                    sup(prefix = '-icab-' + prop, val) ||
                    // IDK
                    sup(prefix = '-epub-' + prop, val) ||
                    // IDK
                    // sup(prefix = `-internal-${prop}`, val) ||
                    badCSS("Unrecognized CSS at '" + (prefix = prop) + ": " + val + "'", silent),
                    // mayNotBeSupported(prop),
                    dontRedo_set(prop, prefix),
                    // Sorry!
                    prefix)
            }
            return prop
        }
        function importFont(name, src) {
            if (name && src) {
                var font = new FontFace(name, "url("+src+")")
                font.load().then(document.fonts.add, console.warn)
                return font
            }
            throw Error('Source and name required')
        }
        function toCaps(prop) {
            return prop.includes('-') && !prop.startsWith('--') ? (prop[0] === '-' ? prop.slice(1) : prop).replace(dash, tuc) : prop
        }
        function toDash(prop) {
            return prop.startsWith('--') ? prop :
                prop.replace(azregex, tlc)
        }
        function tlc(o) {
            return'-'+o.toLowerCase()
        }
        function tuc(c) {
            return c[1].toUpperCase()
        }
        /**
         * @param {Object} obj key/value pairs that match CSS
         * @returns {String}
         */
        function toCSS(obj, silent) {
            var str = ''
            isArray(obj) && (obj = fromEntries(obj))
            for (var prop in obj) {
                var v = String(obj[prop])
                try {
                    prop === 'content'  && !sup('content', v)&& (v='"'+v+'"')
                    str += vendor(toDash(prop),v,silent)+':'+v+';'
                } catch (e) {
                    reportError(e)
                }
            }
            return str
        }
        function mapThing(selectr) {
            return pseudoElementRegex(selectr) ? pev(selectr) : pseudoClassRegex(selectr) ? pcv(selectr) : selectr
        }
        /**
         *  ⚠️ Should only be used for dynamic/default CSS
         * @param {String} selector A valid CSS selector (something like . or#)
         * @param {Object} rule An object which describes the selector
         */
        function registerCSS(selector, rule, silent) {
            var str = ''
            selector = selector.split(',')
                for(var i = 0, len = selector.length; i  < len; ++i) 
                    str += mapThing(selector[i])
            var r = '{'+toCSS(rule,silent)+'}'
            setTextContent(getTextContent()+formatStr(str)+formatStr(r))
            return sheet
        }
        function registerCSSRaw(rules) {
            setTextContent(getTextContent() + rules)
            return sheet
        }
        function formatStr(str) {
            return str.trim().replace(cleanRegex, '')
        }
        function importCSS(url) {
            var n = createElement('link'),
                s = n.setAttribute.bind(n)
            s('rel', 'stylesheet')
            s('fetchpriority', 'high')
            s('href', url)
            addElement(n)
            return n
        }
        function getDefaultStyleSheet() {
            return (get() || function () {
                var str = name || '@namespace svg url("http://www.w3.org/2000/svg");@media(prefers-reduced-transparency:reduce){*{opacity:1 !important;}}:root{--system-font:system-ui,-apple-system,BlinkMacSystemFont,\'Segoe UI\',Roboto,Oxygen,Ubuntu,Cantarell,\'Open Sans\',\'Helvetica Neue\',sans-serif}@supports not(content-visibility:auto){*{visibility:var(--content-visibility)}}@supports not(scrollbar-color:auto){::-webkit-scrollbar{width:var(--scrollbar-width);background-color:var(--scrollbar-color)}::-webkit-scrollbar-thumb{background-color:var(--scrollbar-thumb-color)}}' + disambiguity
               /* if (document.readyState === 'loading' && !inModule) {
                document.write('<style id="addedStyleRules">' + str + '</style>')
                return document.getElementById('addedStyleRules')
                }*/
                var out = createElement('style'),
                l = out.setAttribute.bind(out)
                l('id', disambiguity)
                l('blocking', out.blocking = 'render')
                out.textContent = str
                addElement(out)
                return out
            }())
        }
        function getWhateverNode() {
            return document.head || document.body || document.documentElement || document.getElementsByTagName('*')[0] || document
        }
        function addElement(el) {
            getWhateverNode().appendChild(el)
        }
        function registerCSSAll(rules) {
            Object.keys(rules).forEach(reg, rules)
        }
        function reg(r) {
            try {
                registerCSS(r, this[r])
            } catch (e) {
                reportError(e)
            }
        }
        function supportsRule(rule) {
            return sup("selector("+rule+')')
        }
        function pclass(className) {
            var a = className.split(':')
                , before = a[0],
                cls = a[1],
                already = cls
            cls = cls.replace(allVendors, '')
            if (supportsRule(already = before + ':' + already)) return already
            for (var i = theNames.length; i--;) {
                var vendor = theNames[i]
                    , name = ':-' + vendor + '-' + cls
                if (supportsRule(name)) return before+name
            }
            if (supportsRule(className = ':prince-' + cls) ||
                supportsRule(className = ':mso-' + cls)) return before + className
            return 'before'+':'+cls
        }
        function pelem(element) {
            var a = element.split('::'),
                before = a[0],
                el = a[1],
                already = el
            el = el.replace(allVendors, '')
            if (supportsRule(already = before + '::' + already)) return already
            for (var i = theNames.length; i--;) {
                var vendor = theNames[i]
                    , name = '::-' + vendor + '-' + el
                if (supportsRule(name)) return before + name
            }
            if (supportsRule(element = '::prince-' + el) ||
                supportsRule(element = '::mso-' + el)) return before + element
            return before + '::' + el
        }
        function g(name, initialValue, inherits, syntax) {
            add(name)
            return { name: '--' + name, initialValue: initialValue, inherits: inherits == null ? false : !!(initialValue == null ? 'auto' : initialValue), syntax: syntax == null ? '*' : syntax }
        }
        function where(selector) {
            return':where('+selector+')'
        }
        sup('selector(:where(p))') || (where = function (o) { return o })
        var fallback
        , all = [
            g("user-select", "auto", true), // Most important one
            g("user-modify", "auto", false),
            g("zoom", "auto", false),
            g('locale', 'auto', true),
            g('line-grid', 'auto', true),
            g('line-snap', 'auto', true),
            g('nbsp-mode', 'auto', true),
            g("text-zoom", 'auto', true),
            g('line-align', 'auto', true),
            g('user-drag', "auto", true),
            g('text-decorations-in-effect', 'auto', false),
            g("force-broken-image-icon", 0, false, "<integer>"),
            g("float-edge", "content-box", false),
            g("image-region", "auto", true),
            g("box-orient", "inline-axis", false),
            g("box-align", "stretch", false),
            g("box-direction", "normal", false),
            g("box-flex", 0, false),
            g("box-flex-group", 0, false),
            g("box-lines", "single", false),
            g("box-ordinal-group", "1", false),
            g("box-decoration-break", "slice", false),
            g("box-pack", "start", false),
            g("user-input", "auto", true),
            g("box-reflect", "none", false), // Kewl
            g("text-stroke-color", "currentcolor", true, "<color>"),
            g("text-stroke-width", 0, false, "<length>"),
            g("text-security", "none", false),
            g("text-fill-color", "currentcolor", true),
            g("line-clamp", "none", false),
            g("font-smoothing", "auto", true),
            g("mask-position-x", "0%", false, "<length-percentage>"),
            g("mask-position-y", "0%", false, "<length-percentage>"),
            g("tap-highlight-color", "rgb(0, 0, 0, 0.18)", true, "<color>"),
            g("touch-callout", "auto", true),
            g("window-dragging", "auto", false),
            g("stack-sizing", "stretch-to-fit", true),
            g("mask-composite", "source-over", false),
            g("image-rect", "auto", true),
            g("context-properties", "none", true),
            g("outline-radius", "0 0 0 0", false),
            g("window-shadow", "auto", false),
            g("binding", "none", false),
            g("user-focus", "none", false),
            g("text-blink", "none", false),
            g("content-zoom-limit", "400% 100%", false),
            g("accelerator", 0, false),
            g("initial-letter", "normal", false),
            g("text-kashida-space", "0%", true, "<percentage>"),
            g("interpolation-mode", "none", false),
            g("progress-appearance", "bar", false),
            g("content-zooming", "auto", false),
            g("flow-from", "none", false),
            g("flow-into", "none", false),
            g("content-zoom-chaining", "none", false),
            g("high-contrast-adjust", "auto", true),
            g("ime-mode", "auto", false),
            g("overflow-style", "auto", true),
            g("touch-select", "grippers", true),
            g("behaviour", "url()", false, "<url>"),
            g("interactivity", "auto", true),
            g("input-security", "auto", false),
            g("caret-animation", "auto", true),
            g("wrap-through", "wrap", false),
            g("print-color-adjust", "economy", true),
            g("cursor-visibility", "auto", true),
            g("pay-button-style", "white", false),
            g("color-filter", "none", true),
            g("pay-button-type", "plain", false),
            g("visual-effect", "none", true),
            g("text-spacing-trim", "normal", true),
            g("text-group-align", "none", false),
            g("text-autospace", "normal", true),
            g("orient", 'inline', false),
            g("ruby-overhang", "auto", true),
            g("max-lines", "none", false),
            g("line-fit-edge", "leading", true),
            g("continue", "auto", false),
            g("dashboard-region", "none", false),
            g("overflow-scrolling", "auto", false),
            g("column-axis", "auto", false),
            g('column-progression', 'auto', false),
            g('content-visibility', 'visible',false),
            // ^ This is a special case just to support older browsers without 'ContentVisibilityAutoStateChangeEvent'
            g('text-size-adjust', 'auto', true),
            g('border-vertical-spacing', 'auto', false),
            g('max-logical-height', 'none', false),
            g('min-logical-height', 'none', false),
            g('max-logical-width', 'none', false),
            g('min-logical-width', 'none', false),
            g('buffered-rendering', 'auto', false),
            g('color-rendering', 'auto', false),
            g('word-wrap', 'normal', false)
        ],
            dflt = name.trim() ? name : entries(function () {
                var align = sup.bind(1, 'text-align')
                , o = {
                    ':root': {
                        'interpolate-size': 'allow-keywords',
                        '--crisp-edges': '-webkit-optimize-contrast -moz-crisp-edges'.split(' ').find(sup.bind(1,'image-rendering')),
                        '--stretch': '-moz-available -webkit-fill-available stretch'.split(' ').find(sup.bind(1, 'max-width')),
                        '--center': '-moz-center -webkit-center -khtml-center'.split(' ').find(align),
                        // this is different from just 'center' and idk why!!!
                        '--match-parent': '-moz-match-parent -webkit-match-parent'.split(' ').find(align)
                    }
                }
                o[where("button,a,input[type=button],input[type=checkbox],input[type=radio],input[type=submit],input[type=image],input[type=reset],input[type=file]")] = { cursor: 'pointer' }
                o[where('[aria-busy="true"]')] = { cursor: 'progress' }
                o[where('[draggable="false"]')] = { '--user-drag': 'none' }
                o[where('[draggable="true"]')] = { '--user-drag': 'element' }
                o[where('[contenteditable],[contenteditable="true"]')] = { '--user-modify': 'read-write' }
                o[where('[contenteditable="false"]')] = { '--user-modify': 'read-only', '--user-input': 'none' }
                o[where('[contenteditable="plaintext-only"]')] = { '--user-modify': 'read-write-plaintext-only' }
                o[where('[inert]')] = { '--interactivity': 'inert' }
                o[where('img')] = { '--force-broken-image-icon': 1 }
                o[where('input[type=range]')] = { cursor: 'grab' }
                o[where('input[type=range]:active')] = { cursor: 'grabbing' }
                o[where(':disabled,[aria-disabled="true"]')] = { cursor: 'not-allowed' }
                o[where('.centerx,.center')] = { 'justify-self': 'center', margin: 'auto', 'text-align': 'center' }
                o[where('.centery,.center')] = { 'align-self': 'center', inset: 0, position: 'fixed' }
                return o
            }()).map(function (a) { return a[0]+'{'+toCSS(a[1])+'}' })
            , join = [].join.bind(dflt)
            , first = getTextContent()
            , universal = {}
            , func = CSS.registerProperty || void (fallback = new Map), selector = '*,:where(::-moz-color-swatch,::-moz-focus-inner,::-moz-list-bullet,::-moz-list-number,::-moz-meter-bar,::-moz-progress-bar,::-moz-range-progress,::-moz-range-thumb,::-moz-range-track,::-webkit-inner-spin-button,::-webkit-meter-bar,::-webkit-meter-even-less-good-value,::-webkit-meter-inner-element,::-webkit-meter-optimum-value,::-webkit-meter-suboptimum-value,::-webkit-progress-bar,::-webkit-progress-inner-element,::-webkit-progress-value,::-webkit-scrollbar,::-webkit-search-cancel-button,::-webkit-search-results-button,::-webkit-slider-runnable-track,::-webkit-slider-thumb,::after,::backdrop,::before,::checkmark,::column,::cue,::details-content,::file-selector-button,::first-letter,::first-line,::grammar-error,::marker,::picker-icon,::placeholder,::scroll-marker,::scroll-marker-group,::selection,::spelling-error,::target-text,::view-transition)'
        for (var i = all.length; i--;) {
            var prop = all[i]
                , o = prop.name,
                key = vendor(o.slice(2), o = 'var('+o+')', true)
            universal[key] = o
            try { func(prop) }
            catch (e) {
                e.name === 'InvalidModificationError' || (console.log(o), reportError(e),func || fallback.set(key, vendor(key, 'inherit')))
            }
        }
        try {
            func({ name: '--scrollbar-thumb-color', initialValue: 'auto', inherits: true })
            func({ name: '--scrollbar-color', initialValue: 'auto', inherits: true })
        }
        catch(e){reportError(e)}
        universal['box-sizing'] = 'border-box'
        universal['overflow-wrap'] = 'var(--word-wrap)'
        universal['scrollbar-color'] = 'var(--scrollbar-thumb-color) var(--scrollbar-color)'
        all = null
        var str
        setTextContent(name || (setName(str = first + selector + '{'+toCSS(universal,true)+'}' + join('')), str))
        return w[sym] = Object.preventExtensions({
            getDefaultStyleSheet: getDefaultStyleSheet,
            registerCSSRaw: registerCSSRaw,
            supportedPElementVendor: pelem,
            reducedMotion: reducedMotion,
            registerCSSAll: registerCSSAll,
            supportedPClassVendor: pclass,
            supportsRule: supportsRule,
            registerCSS: registerCSS,
            dashVendor: dashVendor,
            importFont: importFont,
            formatStr: formatStr,
            capVendor: capVendor,
            importCSS: importCSS,
            badCSS: badCSS,
            toCaps: toCaps,
            toDash: toDash,
            vendor: vendor,
            toCSS: toCSS,
            has: has,
            pev: pev,
            pcv: pcv,
            all: dflt
        })
    }
}.call(null,window,typeof Symbol==='function'?Symbol.for('CSS'):'!@#$%^&*()9021482947'))